@startuml SGA
' Comments about competitions
' 10 competitions
' x11 disciplines
' Not seemifinal only final


' Relationsships between classes
FileHandler <- Scheduler
Athlete --* Competition
Competition <---- Scheduler

' Enum relations
CompetitionType -o Competition
Event o- Station
Event o- SexCategory

Event o- AgeGroup
Athlete o- SexCategory
Event o- CompetitionType

'Inheritance
JumpingHigh -|> Competition
JumpingLong -|> Competition
JumpingPole -|> Competition
JumpingTriple -|> Competition

Running60 -|> Competition
Running200 -|> Competition
Running300 -|> Competition
Running800 -|> Competition
Running1500 -|> Competition
Running300 -|> Competition
RunningHurdles -|> Competition

Throwing -|> Competition

Scheduler -> Event




' Classes
class FileHandler{
    - filePath : String
    - fileContent : String

    + Constructors()
    + getters() : String
    + readFileFromPath() : void
    + writeFileToPath() : void
}

Class Athlete{
    - firstName : String
    - lastName : String
    - age : int
    - sexCategory : enum
    - competitionResult : hashMap

    + Constructor()
    + getters() : variableType
    + setters() : void
    - convertTime() : double
    - parseDouble() : double
    + printAthleteInformation() : void
}

enum CompetitionType{
    + RNNINGg60
    + RUNNINGg200
    + RUNNING800
    + RUNNING1500
    + RUNNING300
    + RUNNINGHURDLES
    + LONGJUMMPING
    + HIGHJUMPING
    + POLEJUMPING
    + THROWING
}

enum SexCategory{
    + Male
    + Female
    + Both
}

enum Station{
    + RUNNINGCIRCLE
    + SPRINTLINE
    + LONGTRIPEJUMP
    + HIGHJUMP
    + POLE
    + SHOTTHROWING
    + AWARDCEREMONYAREA
}

enum AgeGroup{
    + age7_8
    + age9_10
    + age11_12
    + age13_14
    + age15_16
    + age17_18
    + adult
}

class Scheduler{
    - competitions : hashMap
    - athletes : athlete[]
    + schedule : hashMap
    - breakTime : int
    - startTimeOfTheDay : int
    -endTimeOfTheTime : int
    - onDayInMinutes : int

    + Constructor()
    - getCompetitionStation() : Station
    - doesCollide() : boolean
    - hasOverlappingAthletes() : boolean
    - overlappingGeneral() : void
    - moveIfOvrlappGeneral() : void
    - overlappingOwnStation() : void
    - moveOverlappOwnStation() : void
    - moveIfOverlappOwnStation() : void
    - finalAvailablePosition() : void
    - addToSchedule() : void
    - initializeCompetition() : void
    - initializeStation : void
    - addAllEvents() : void
    + generateSchedule() : void
    - initializeAthlete() : void
    - createCompetitionType() : Competition
    - getAgeGroup() : AgeGroup
    - addCompetitior() : void
    - fillCompetitions() : void
    - loadParticipants() : void
    + translateTime() : int
    - generateCSV() : void
    - lineIt() : String
    - sortEvents() : void
    - sortEvents2() : void
}

class Competition{
    + athletesID : int[]
    + qualifierGroups : int[][][]
    - getterIndex : int
    - duration : int
    - ccompetitionType : CompetitionType
    + calculateGroups : abstract void

    + getNext() : Vector
    + calculateDuration() : void
}

class Event{
    + competitionType : CompetitionType
    + station : Station
    + stationIndex : int
    + participnts : Vector
    + day : int
    + startTime : int
    + endTime : int
    + duration : int
    + priorityIndex : int
    + ageGroup : AgeGroup
    + sexCategory : SexCategory

    + printCompetitionInformation : void
}

'Disciplines
class Running60{
    + calculateGroups() : void
    + getNext() : Vector
}

class Running200{
    + calculateGroups() : void
    + getNext() : Vector
}

class Running800{
    + calculateGroups() : void
    + getNext() : Vector
}

class Running1500{
    + calculateGroups() : void
    + getNext() : Vector
}

class Running300{
    + calculateGroups() : void
    + getNext() : Vector
}

class RunningHurdles{
    + calculateGroups() : void
    + getNext() : Vector
}

class JumpingHigh{
    - highestRecord : double
    - personalRecords : Vector
    - recordMultiplier : double
    - startHeight : final int

    + calculateGroups() : void
    + calculateDuration() : void
    + getNext() : Vector
}

class JumpingLong{
    + calculateGroups()
    + calculateDuration()
    + getNext() : Vector
}

class JumpingTriple{
    + calculateGroups() : void
    + calculateDuration() : void
    + getNext() : Vector

}

class JumpingPole{
    - highestRecord : double
    - personalRecords : Vector
    - recordMultiplier : constant final double
    - startHeight : fianl int

    + calculateGroups() : void
    + calculateDuration() : void
    + getNext() : Vector
}

class Throwing{
    + calculateGroups() : void
    + calculateDuration() : void
    + getNext() : Vector
}


@enduml